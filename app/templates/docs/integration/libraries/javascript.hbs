<Layout::Text text-l text-f>
	<h5><i class="fas fa-arrow-left"></i> &nbsp; <Link @link="docs.integration.libraries">Back</Link></h5>
	<h2><i class="fab fa-js-square font-35 m-r-10"></i> JavaScript driver for <img inline src="/static/img/text.svg" alt="SurrealDB" /></h2>
	<p>The SurrealDB library for JavaScript enables simple and advanced querying of a remote database from a browser or from server-side code. All connections to SurrealDB are made over WebSockets, and automatically reconnect when the connection is terminated.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Install the library</h3>
	<p>First, install the SurrealDB library using <code>npm</code>:</p>
	<Code @name="docs-integration-libraries-javascript-install-npm.bash">
		npm install --save surrealdb.js
	</Code>
	<p>Alternatively, you can use install the SurrealDB library using <code>yarn</code>:</p>
	<Code @name="docs-integration-libraries-javascript-install-yarn.bash">
		yarn add surrealdb.js
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Connect to SurrealDB</h3>
	<p>Create a new app.js file and add the following code to try out some basic operations using the SurrealDB driver.</p>
	<Code @name="docs/integration/libraries/javascript/basic.js" />
	<p>Then run your app from the command line with:</p>
	<Code @name="docs-integration-libraries-javascript-basic-run.bash">
		node app.js
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Library methods</h3>
	<p>The JavaScript library comes with a number of built-in functions.</p>
</Layout::Text>

<Layout::Gap tiny />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#Instance">
						<Ascua::Prism::Inline @language="js" @code="Surreal.Instance" />
					</a>
					<l faint r>static</l>
				</td>
				<td>Connects to a specific database endpoint</td>
			</tr>
			<tr>
				<td>
					<a href="#connect">
						<Ascua::Prism::Inline @language="js" @code="db.connect(url)" />
					</a>
				</td>
				<td>Connects to a local or remote database endpoint</td>
			</tr>
			<tr>
				<td>
					<a href="#wait">
						<Ascua::Prism::Inline @language="js" @code="db.wait()" />
					</a>
				</td>
				<td>Waits for the connection to the database to succeed</td>
			</tr>
			<tr>
				<td>
					<a href="#close">
						<Ascua::Prism::Inline @language="js" @code="db.close()" />
					</a>
				</td>
				<td>Closes the persistent connection to the database</td>
			</tr>
			<tr>
				<td>
					<a href="#use">
						<Ascua::Prism::Inline @language="js" @code="db.use(ns, db)" />
					</a>
				</td>
				<td>Switch to a specific namespace and database</td>
			</tr>
			<tr>
				<td>
					<a href="#signup">
						<Ascua::Prism::Inline @language="js" @code="db.signup(vars)" />
					</a>
				</td>
				<td>Signs this connection up to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#signin">
						<Ascua::Prism::Inline @language="js" @code="db.signin(vars)" />
					</a>
				</td>
				<td>Signs this connection in to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#invalidate">
						<Ascua::Prism::Inline @language="js" @code="db.invalidate()" />
					</a>
				</td>
				<td>Invalidates the authentication for the current connection</td>
			</tr>
			<tr>
				<td>
					<a href="#authenticate">
						<Ascua::Prism::Inline @language="js" @code="db.authenticate(token)" />
					</a>
				</td>
				<td>Authenticates the current connection with a JWT token</td>
			</tr>
			<tr>
				<td>
					<a href="#let">
						<Ascua::Prism::Inline @language="js" @code="db.let(key, val)" />
					</a>
				</td>
				<td>Assigns a value as a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#query">
						<Ascua::Prism::Inline @language="js" @code="db.query(sql, vars)" />
					</a>
				</td>
				<td>Runs a set of SurrealQL statements against the database</td>
			</tr>
			<tr>
				<td>
					<a href="#select">
						<Ascua::Prism::Inline @language="js" @code="db.select(thing)" />
					</a>
				</td>
				<td>Selects all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#create">
						<Ascua::Prism::Inline @language="js" @code="db.create(thing, data)" />
					</a>
				</td>
				<td>Creates a record in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#update">
						<Ascua::Prism::Inline @language="js" @code="db.update(thing, data)" />
					</a>
				</td>
				<td>Updates all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#change">
						<Ascua::Prism::Inline @language="js" @code="db.change(thing, data)" />
					</a>
				</td>
				<td>Modifies all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#modify">
						<Ascua::Prism::Inline @language="js" @code="db.modify(thing, data)" />
					</a>
				</td>
				<td>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#delete">
						<Ascua::Prism::Inline @language="js" @code="db.delete(thing)" />
					</a>
				</td>
				<td>Deletes all records, or a specific record</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "Instance"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="Surreal.Instance" /></h3>
		<p>The <code>Instance</code> static singleton ensures that a single database instance is available across very large or complicated applications. With the singleton, only one connection to the database is instantiated, and the database connection does not have to be shared across components or controllers.</p>
		<Code @name="docs-integration-libraries-javascript-instance.js">
			const Surreal = require('surrealdb.js');

			async function main() {
				try {
					// Connect to the database
					await Surreal.Instance.connect('https://cloud.surrealdb.com/rpc');
					// Select a namespace + database
					await Surreal.Instance.use("test", "test");
					// Create or update a specific record
					await Surreal.Instance.update("person:tobie", {
						name: 'Tobie',
					});
				} catch (e) {
					console.error('ERROR', e);
				}
			}

			main();

		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "connect"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.connect(url)" /></h3>
		<p>Connects to a local or remote database endpoint.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>url</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The url of the database endpoint to connect to.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-connect.js">
			// Connect to a local endpoint
			await db.connect('http://127.0.0.1:8000/rpc');
			// Connect to a remote endpoint
			await db.connect('https://cloud.surrealdb.com/rpc');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "wait"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.wait()" /></h3>
		<p>Waits for the connection to the database to succeed.</p>
		<Code @name="docs-integration-libraries-javascript-wait.js">
			await db.wait();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "close"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.close()" /></h3>
		<p>Closes the persistent connection to the database.</p>
		<Code @name="docs-integration-libraries-javascript-close.js">
			db.close();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "use"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.use(ns, db)" /></h3>
		<p>Switch to a specific namespace and database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>ns</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Switches to a specific namespace.
						</td>
					</tr>
					<tr>
						<td>
							<code>db</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Switches to a specific database.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-use.js">
			await db.use('test', 'test');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signup"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.signup(vars)" /></h3>
		<p>Signs up to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>vars</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Variables used in a signup query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-signup.js">
			let token = await db.signup({
				NS: 'test',
				DB: 'test',
				SC: 'user',
				email: 'info@surrealdb.com',
				pass: '123456',
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signin"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.signin(vars)" /></h3>
		<p>Signs in to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>vars</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Variables used in a signin query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-signin.js">
			let token = await db.signin({
				NS: 'test',
				DB: 'test',
				SC: 'user',
				email: 'info@surrealdb.com',
				pass: '123456',
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "invalidate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.invalidate()" /></h3>
		<p>Invalidates the authentication for the current connection.</p>
		<Code @name="docs-integration-libraries-javascript-invalidate.js">
			await db.invalidate();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "authenticate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.authenticate(token)" /></h3>
		<p>Authenticates the current connection with a JWT token.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>token</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The JWT authentication tokwn.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-authenticate.js">
			await db.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "let"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.let(key, val)" /></h3>
		<p>Assigns a value as a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
					<tr>
						<td>
							<code>val</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Assigns the value to the variable name.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-let.js">
			// Assign the variable on the connection
			await db.let('name', {
				first: 'Tobie',
				last: 'Morgan Hitchcock',
			});
			// Use the variable in a subsequent query
			await db.query('CREATE person SET name = $name');
			// Use the variable in a subsequent query
			await db.query('SELECT * FROM person WHERE name.first = $name.first');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "query"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.query(sql, vars)" /></h3>
		<p>Runs a set of SurrealQL statements against the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>sql</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the SurrealQL statements.
						</td>
					</tr>
					<tr>
						<td>
							<code>vars</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Assigns variables which can be used in the query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-query.js">
			// Assign the variable on the connection
			let result = await db.query('CREATE person; SELECT * FROM type::table($tb);', {
				tb: 'person',
			});
			// Get the first result from the first query
			let created = result[0].result[0];
			// Get all of the results from the second query
			let people = result[1].result;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "select"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.select(thing)" /></h3>
		<p>Selects all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record id to select.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-select.js">
			// Select all records from a table
			let people = await db.select('person');
			// Select a specific record from a table
			let person = await db.select('person:h5wxrf2ewk8xjxosxtyc');
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-select-func.sql">
			SELECT * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "create"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.create(thing, data)" /></h3>
		<p>Creates a record in the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record id to create.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-create.js">
			// Create a record with a random id
			let person = await db.create('person');
			// Create a record with a specific id
			let record = await db.create('person:tobie', {
				name: 'Tobie',
				settings: {
					active: true,
					marketing: true,
				},
			});
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-create-func.sql">
			CREATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "update"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.update(thing, data)" /></h3>
		<p>Updates all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function replaces the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record id to update.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-update.js">
			// Update all records in a table
			let people = await db.update('person');
			// Update a record with a specific id
			let person = await db.update('person:tobie', {
				name: 'Tobie',
				settings: {
					active: true,
					marketing: true,
				},
			});
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-update-func.sql">
			UPDATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "change"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.change(thing, data)" /></h3>
		<p>Modifies all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function merges the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record id to update.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-change.js">
			// Update all records in a table
			let people = await db.change('person', {
				updated_at: new Date(),
			});
			// Update a record with a specific id
			let person = await db.change('person:tobie', {
				updated_at: new Date(),
				settings: {
					active: true,
				},
			});
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-change-func.sql">
			UPDATE $thing MERGE $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "modify"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.modify(thing, data)" /></h3>
		<p>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function patches the current document / record data with the specified <Link @link="https://jsonpatch.com">JSON Patch</Link> data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record id to update.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The <Link @link="https://jsonpatch.com">JSON Patch</Link> data with which to modify the records.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-modify.js">
			// Update all records in a table
			let people = await db.modify('person', [
				{ op: "replace", path: "/created_at", value: new Date() },
			]);
			// Update a record with a specific id
			let person = await db.modify('person:tobie', [
				{ op: "replace", path: "/settings/active", value: false },
				{ op: "add", "path": "/tags", "value": ["developer", "engineer"] },
				{ op: "remove", "path": "/temp" },
			]);
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-modify-func.sql">
			UPDATE $thing PATCH $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "delete"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="db.delete(thing)" /></h3>
		<p>Deletes all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record id to select.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-delete.js">
			// Delete all records from a table
			await db.delete('person');
			// Delete a specific record from a table
			await db.delete('person:h5wxrf2ewk8xjxosxtyc');
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-delete-func.sql">
			DELETE * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />
